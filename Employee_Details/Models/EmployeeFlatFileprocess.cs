using Employee_Details.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.Extensions.Logging;



namespace Employee_Details.Models
{
    public class EmployeeFlatFileprocess
    {
        private readonly EmployeeContext _Context;

       
        private readonly ILogger<EmployeeFlatFileprocess> _logger;

        public EmployeeFlatFileprocess(EmployeeContext context, ILogger<EmployeeFlatFileprocess> logger)
        {
            _Context = context;
            _logger = logger;
        }


       



        public void ProcessFile(string filePath)
        {
            List<string> errorRecords = new List<string>();

          // _logger.LogInformation("Processing file: {FilePath}", filePath);

            string[] lines = File.ReadAllLines(filePath);
          
           // _logger.LogInformation("value of lines is :{lines}", lines);


          
            // Skip the header line
            for (int i = 0; i < lines.Length; i++)
            {
              //_logger.LogInformation("Processing line {LineNumber}", i);

                string line = lines[i];
                string[] fields = line.Split('|');



                Employee employee = new Employee
                {
                    FirstName = fields[0],
                    LastName = fields[1],
                    Age = ParseInt(fields[2]),
                    Salary = ParseDecimal(fields[3]),
                    Designation = ParseInt(fields[4]),
                    Gender = ParseInt(fields[5])
                    // EmpId is an identity column and will be generated by the database
                };



                List<string> validationErrors = ValidateEmployee(employee);



                if (validationErrors.Any())
                {
                    string errorRecord = $"{line} - {string.Join(", ", validationErrors)}";
                    errorRecords.Add(errorRecord);

                   // _logger.LogWarning("Validation errors found for line {LineNumber}: {Errors}", i, string.Join(", ", validationErrors));
                }
                else
                {
                   // _logger.LogInformation("Adding employee to the database");

                    _Context.Employees.Add(employee);
                }
            }

            _Context.Database.ExecuteSqlRaw("DISABLE TRIGGER ALL ON Employees");
      
            _Context.SaveChanges();

            _Context.Database.ExecuteSqlRaw("ENABLE TRIGGER ALL ON Employees");

           // _logger.LogInformation("Saving changes to the database");


            if (errorRecords.Any())
            {
                string errorFilePath = GetErrorFilePath(filePath);
                CreateErrorFile(errorFilePath, errorRecords);
            }
        }



        private int ParseInt(string value)
        {
            int.TryParse(value, out int result);
            return result;
        }



        private decimal ParseDecimal(string value)
        {
            decimal.TryParse(value, out decimal result);
            return result;
        }



        private List<string> ValidateEmployee(Employee employee)
        {
            List<string> validationErrors = new List<string>();



            if (employee.Age < 1 || employee.Age > 100)
            {
                validationErrors.Add("Age should be between 1 and 100");
            }



            if (employee.Gender != 1 && employee.Gender != 2 && employee.Gender != 8)
            {
                validationErrors.Add("Gender should be 1 (for male), 2 (for female), or 8 (for others)");
            }




            if (employee.Salary < 100 || employee.Salary > 10000000)
            {
                validationErrors.Add("Salary should be between 1000 and 100000");
            }



            if (string.IsNullOrWhiteSpace(employee.FirstName) || employee.FirstName.Length > 50)
            {
                validationErrors.Add("First Name should not be empty or exceed 50 characters");
            }

            if (string.IsNullOrWhiteSpace(employee.LastName) || employee.LastName.Length > 50)
            {
                validationErrors.Add("Last Name should not be empty or exceed 50 characters");
            }



            return validationErrors;
        }



        private void CreateErrorFile(string filePath, List<string> errorRecords)
        {
            string errorFilePath = filePath;



            // Append a number to the file name if the error file already exists
            int count = 1;
            while (File.Exists(errorFilePath))
            {
                string fileName = Path.GetFileNameWithoutExtension(filePath);
                string extension = Path.GetExtension(filePath);
                string newFileName = $"{fileName}_{count}{extension}";
                errorFilePath = Path.Combine(Path.GetDirectoryName(filePath), newFileName);
                count++;
            }



            using (StreamWriter writer = File.CreateText(errorFilePath))
            {
                foreach (string errorRecord in errorRecords)
                {
                    writer.WriteLine(errorRecord);
                }
            }
        }



        private string GetErrorFilePath(string filePath)
        {
            string directory = Path.GetDirectoryName(filePath);
            string fileName = Path.GetFileNameWithoutExtension(filePath);
            string errorFileName = $"{fileName}_Error.txt";
            string errorFilePath = Path.Combine(directory, errorFileName);
            return errorFilePath;
        }
    }
   
}